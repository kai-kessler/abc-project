@ <stdio.hdr>
@ <stdlib.hdr>
@ "expr.hdr"

fn createBinaryExpr(kind: ExprKind, left: ->Expr, right: ->Expr): ->Expr
{
    local node: -> Expr = malloc(sizeof(*node));
    assert(node);
    node->kind = kind;
    node->left = left;
    node->right = right;
    return node;
}

fn createIntegerExpr(val: string): ->Expr
{
    local n: -> Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_INTEGER;
    n->decimal = val;
    return n;
}

fn releaseExpr(expr: ->Expr)
{
    if (!expr) {return;}

    if (expr->kind >= EXPR_BINARY && expr->kind < EXPR_BINARY_END) {
        releaseExpr(expr->left);
        releaseExpr(expr->right);
    }

    free(expr);
}

fn printExprTree(expr: ->Expr)
{
    if (expr->kind == EXPR_INTEGER) {
        printf(" [ %llu ]", expr->decimal);
    } else if (expr->kind >= EXPR_BINARY && expr->kind < EXPR_BINARY_END) {
        printf(" [ ");
        switch (expr->kind) {
            case EXPR_ADD: printf("+"); break;
            case EXPR_SUB: printf("-"); break;
            case EXPR_MUL: printf("*"); break;
            case EXPR_DIV: printf("/"); break;
            default: assert(0);
        }
        printExprTree(expr->left);
        printExprTree(expr->right);
        printf(" ]");
    }
}
